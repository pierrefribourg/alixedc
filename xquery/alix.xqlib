(:
    /**************************************************************************\
    * ALIX EDC SOLUTIONS                                                       *
    * Copyright 2012 Business & Decision Life Sciences                         *
    * http://www.alix-edc.com                                                  *
    * ------------------------------------------------------------------------ *                                                                       *
    * This file is part of ALIX.                                               *
    *                                                                          *
    * ALIX is free software: you can redistribute it and/or modify             *
    * it under the terms of the GNU General Public License as published by     *
    * the Free Software Foundation, either version 3 of the License, or        *
    * (at your option) any later version.                                      *
    *                                                                          *
    * ALIX is distributed in the hope that it will be useful,                  *
    * but WITHOUT ANY WARRANTY; without even the implied warranty of           *
    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            *
    * GNU General Public License for more details.                             *
    *                                                                          *
    * You should have received a copy of the GNU General Public License        *
    * along with ALIX.  If not, see <http://www.gnu.org/licenses/>.            *
    \**************************************************************************/
:)

module namespace alix = "http://www.alix-edc.com/alix";
declare namespace odm = 'http://www.cdisc.org/ns/odm/v1.3';

(:
    here we have several helpers functions to be used in writing edit-checks
    1°) alix:getValue($ItemData,'ItemOID') => Get the value Item in the same ItemGroupData
    2°) alix:getValue($ItemData,'ItemGroupOID','ItemOID') => Get the value of an Item located in the same Form, but in a different ItemGroupData
    3°) alix:getValue($ItemData,'FormOID','ItemGroupOID','ItemOID') => As 2°) but it's possible to choose another form within the same StudyEventData
    4°) alix:getValue($ItemData,'StudyEventOID','FormOID','ItemGroupOID','ItemOID') =>As 3°) with the another StudyEventData

    !!!!!Warning!!!!! Note : For 2°,3° and 4°, The RepeatKey is unused, so be carefull

    other helpers :

    alix:getRawValue($ItemData,'ItemOID') => raw value from database, even for ItemDataPartialDate
    alix:getRawValue($ItemData,'ItemGroupOID','ItemOID') => see alix:getRawValue($ItemData,'ItemOID')
    alix:getRawValue($ItemData,'FormOID','ItemGroupOID','ItemOID') => see alix:getRawValue($ItemData,'ItemOID')
    alix:getRawValue($ItemData,'StudyEventOID','FormOID','ItemGroupOID','ItemOID') => see alix:getRawValue($ItemData,'ItemOID')

    alix:getDecode($ItemData,'ItemOID') => Decoded value, use CodeList if available
    alix:getDecode($ItemData,'ItemGroupOID','ItemOID') => see alix:getDecode($ItemData,'ItemOID')
    alix:getDecode($ItemData,'FormOID','ItemGroupOID','ItemOID') => see alix:getDecode($ItemData,'ItemOID')
    alix:getDecode($ItemData,'StudyEventOID','FormOID','ItemGroupOID','ItemOID') => see alix:getDecode($ItemData,'ItemOID')

    alix:compareDate($dt1 as xs:string,$dt2 as xs:string)
    
    alix:getMonth($month) => Receive '1', '2',... and return 'January', 'February', ...
    
    alix:DateISOtoFR('isodate') => Receive an ISO date string, and return a 'dd/mm/yyyy' formatted date string
    
    alix:getAnnotation($ItemData,'ItemOID') => Get the annotation FlagValue : Ø / UNK / ND / NA
    alix:getAnnotation($ItemData,'ItemGroupOID','ItemOID') => see alix:getAnnotation($ItemData,'ItemOID')
    alix:getAnnotation($ItemData,'FormOID','ItemGroupOID','ItemOID') => see alix:getAnnotation($ItemData,'ItemOID')
    alix:getAnnotation($ItemData,'StudyEventOID','FormOID','ItemGroupOID','ItemOID') => see alix:getAnnotation($ItemData,'ItemOID')        
:)

(:To compare partialDate, missing parts are set to 01:)
declare function alix:fillPartialDate($partialDateValue as xs:string?) as xs:string
{
  let $length := string-length($partialDateValue)
  return
    if($length=7)
    then concat($partialDateValue,'-01')
    else
      if($length=4)
      then concat($partialDateValue,'-01-01')
      else
        if($length=0)
        then ''
        else $partialDateValue
};

declare function alix:fillAny($anyValue as xs:string?) as xs:string
{
  let $length := string-length($anyValue)
  return
    if($length=0)
    then ''
    else $anyValue
};

declare function alix:getValue($ItemData as node()*) as xs:string?
{
  let $lastItemData := $ItemData[last()]
  return
    if($lastItemData/name()='ItemDataPartialDate')
    then alix:fillPartialDate($lastItemData/string())
    else
      if($lastItemData/name()='ItemDataAny')
      then alix:fillAny($lastItemData/string())
      else $lastItemData/string()
};

declare function alix:getValue($ItemData as node(),$ItemOID as xs:string) as xs:string?
{
  let $destItemData := $ItemData/../odm:*[@ItemOID=$ItemOID]
  return alix:getValue($destItemData)
};

declare function alix:getValue($ItemData as node(),$ItemGroupOID as xs:string,$ItemOID as xs:string) as xs:string?
{
  let $destItemData := $ItemData/../../odm:ItemGroupData[@ItemGroupOID=$ItemGroupOID]/odm:*[@ItemOID=$ItemOID]
  return alix:getValue($destItemData)
};

declare function alix:getValue($ItemData as node(),$FormOID as xs:string,$ItemGroupOID as xs:string,$ItemOID as xs:string) as xs:string?
{
  let $destItemData := $ItemData/../../../odm:FormData[@FormOID=$FormOID]/odm:ItemGroupData[@ItemGroupOID=$ItemGroupOID]/odm:*[@ItemOID=$ItemOID]
  return alix:getValue($destItemData)
};

declare function alix:getValue($ItemData as node(),$StudyEventOID as xs:string,$FormOID as xs:string,$ItemGroupOID as xs:string,$ItemOID as xs:string) as xs:string?
{
  let $destItemData := $ItemData/../../../../odm:StudyEventData[@StudyEventOID=$StudyEventOID]/odm:FormData[@FormOID=$FormOID]/odm:ItemGroupData[@ItemGroupOID=$ItemGroupOID]/odm:*[@ItemOID=$ItemOID]
  return alix:getValue($destItemData)
};

declare function alix:getValue($ItemData as node(),$StudyEventOID as xs:string,$FormOID as xs:string, $FormRepeatKey as xs:string, $ItemGroupOID as xs:string,$ItemOID as xs:string) as xs:string?
{
  let $destItemData := $ItemData/../../../../odm:StudyEventData[@StudyEventOID=$StudyEventOID]/odm:FormData[@FormOID=$FormOID and @FormRepeatKey=$FormRepeatKey]/odm:ItemGroupData[@ItemGroupOID=$ItemGroupOID]/odm:*[@ItemOID=$ItemOID]
  return alix:getValue($destItemData)
};

declare function alix:getRawValue($ItemData as node()*) as xs:string?
{
  let $v := ''
  return $ItemData[last()]/string()
};

declare function alix:getRawValue($ItemData as node(),$ItemOID as xs:string) as xs:string?
{
  let $destItemData := $ItemData/../odm:*[@ItemOID=$ItemOID]
  return alix:getRawValue($destItemData)
};

declare function alix:getRawValue($ItemData as node(),$ItemGroupOID as xs:string,$ItemOID as xs:string) as xs:string?
{
  let $destItemData := $ItemData/../../odm:ItemGroupData[@ItemGroupOID=$ItemGroupOID]/odm:*[@ItemOID=$ItemOID]
  return alix:getRawValue($destItemData)
};

declare function alix:getRawValue($ItemData as node(),$FormOID as xs:string,$ItemGroupOID as xs:string,$ItemOID as xs:string) as xs:string?
{
  let $destItemData := $ItemData/../../../odm:FormData[@FormOID=$FormOID]/odm:ItemGroupData[@ItemGroupOID=$ItemGroupOID]/odm:*[@ItemOID=$ItemOID]
  return alix:getRawValue($destItemData)
};

declare function alix:getRawValue($ItemData as node(),$StudyEventOID as xs:string,$FormOID as xs:string,$ItemGroupOID as xs:string,$ItemOID as xs:string) as xs:string?
{
  let $destItemData := $ItemData/../../../../odm:StudyEventData[@StudyEventOID=$StudyEventOID]/odm:FormData[@FormOID=$FormOID]/odm:ItemGroupData[@ItemGroupOID=$ItemGroupOID]/odm:*[@ItemOID=$ItemOID]
  return alix:getRawValue($destItemData)
};

declare function alix:getRawValue($ItemData as node(),$StudyEventOID as xs:string,$FormOID as xs:string, $FormRepeatKey as xs:string, $ItemGroupOID as xs:string,$ItemOID as xs:string) as xs:string?
{
  let $destItemData := $ItemData/../../../../odm:StudyEventData[@StudyEventOID=$StudyEventOID]/odm:FormData[@FormOID=$FormOID and @FormRepeatKey=$FormRepeatKey]/odm:ItemGroupData[@ItemGroupOID=$ItemGroupOID]/odm:*[@ItemOID=$ItemOID]
  return alix:getRawValue($destItemData)
};

declare function alix:getDecode($ItemData as node(),$MetaDataVersion as node(),$ItemGroupOID as xs:string,$ItemOID as xs:string) as xs:string?
{
  let $destItemData := $ItemData/../../odm:ItemGroupData[@ItemGroupOID=$ItemGroupOID]/odm:*[@ItemOID=$ItemOID]
  return alix:getDecode($destItemData,$MetaDataVersion)
};

declare function alix:getDecode($ItemData as node(),$MetaDataVersion as node(),$FormOID as xs:string,$ItemGroupOID as xs:string,$ItemOID as xs:string) as xs:string?
{
  let $destItemData := $ItemData/../../../odm:FormData[@FormOID=$FormOID]/odm:ItemGroupData[@ItemGroupOID=$ItemGroupOID]/odm:*[@ItemOID=$ItemOID]
  return alix:getDecode($destItemData,$MetaDataVersion)
};

declare function alix:getDecode($ItemData as node(),$MetaDataVersion as node(),$StudyEventOID as xs:string,$FormOID as xs:string,$ItemGroupOID as xs:string,$ItemOID as xs:string) as xs:string?
{
  let $destItemData := $ItemData/../../../../odm:StudyEventData[@StudyEventOID=$StudyEventOID]/odm:FormData[@FormOID=$FormOID]/odm:ItemGroupData[@ItemGroupOID=$ItemGroupOID]/odm:*[@ItemOID=$ItemOID]
  return alix:getDecode($destItemData,$MetaDataVersion)
};

declare function alix:getDecode($ItemData as node(),$MetaDataVersion as node(),$StudyEventOID as xs:string,$FormOID as xs:string, $FormRepeatKey as xs:string, $ItemGroupOID as xs:string,$ItemOID as xs:string) as xs:string?
{
  let $destItemData := $ItemData/../../../../odm:StudyEventData[@StudyEventOID=$StudyEventOID]/odm:FormData[@FormOID=$FormOID and @FormRepeatKey=$FormRepeatKey]/odm:ItemGroupData[@ItemGroupOID=$ItemGroupOID]/odm:*[@ItemOID=$ItemOID]
  return alix:getDecode($destItemData,$MetaDataVersion)
};

declare function alix:getDecode($ItemData as node(),$MetaDataVersion as node(),$ItemOID as xs:string) as xs:string?
{
  let $destItemData := $ItemData/../odm:*[@ItemOID=$ItemOID]
  return alix:getDecode($destItemData,$MetaDataVersion)
};

declare function alix:getDecode($ItemData as node()*,$MetaDataVersion as node()) as xs:string?
{
  let $value := alix:getValue($ItemData)
  let $CodeListOID := $MetaDataVersion/odm:ItemDef[@OID=$ItemData/@ItemOID]/odm:CodeListRef/@CodeListOID
  return
    if($CodeListOID)
    then $MetaDataVersion/odm:CodeList[@OID=$CodeListOID]/odm:CodeListItem[@CodedValue=$value]/odm:Decode/odm:TranslatedText[@xml:lang='".$this->m_lang."']/string()
    else $value
};

declare function alix:compareDate($dt1 as xs:string,$dt2 as xs:string) as xs:integer
{
  let $lenDt1 := string-length($dt1)
  let $lenDt2 := string-length($dt2)
  return
    if($lenDt1=4 or $lenDt2=4) then compare(substring($dt1,1,4),substring($dt2,1,4)) else
      if($lenDt1=7 or $lenDt2=7) then compare(substring($dt1,1,7),substring($dt2,1,7)) else compare($dt1,$dt2)              
};

declare function alix:getMonth($month as xs:string) as xs:string
{
  let $months := ('January','February','March','April','May','June','July','August','September','October','November','December')
  return
    if($month!='') 
    then $months[xs:integer($month)]
    else ''              
};

declare function alix:DateISOtoFR($dt as xs:string*) as xs:string
{
  let $month := alix:getMonth(substring($dt,6,2))
  return
    if (not($dt)) then
        ''
    else        
        if(string-length($dt)=10) then concat(substring($dt,9,2),'-',$month,'-', substring($dt,1,4)) else
            if(string-length($dt)=7) then concat($month,'-', substring($dt,1,4)) else
              if(string-length($dt)=4) then substring($dt,1,4) else ''                
};

declare function alix:getAnnotation($ItemData as node(),$ItemGroupOID as xs:string,$ItemOID as xs:string) as xs:string?
{
  let $destItemData := $ItemData/../../odm:ItemGroupData[@ItemGroupOID=$ItemGroupOID]/odm:*[@ItemOID=$ItemOID]
  return alix:getAnnotation($destItemData)
};

declare function alix:getAnnotation($ItemData as node(),$FormOID as xs:string,$ItemGroupOID as xs:string,$ItemOID as xs:string) as xs:string?
{
  let $destItemData := $ItemData/../../../odm:FormData[@FormOID=$FormOID]/odm:ItemGroupData[@ItemGroupOID=$ItemGroupOID]/odm:*[@ItemOID=$ItemOID]
  return alix:getAnnotation($destItemData)
};

declare function alix:getAnnotation($ItemData as node(),$StudyEventOID as xs:string,$FormOID as xs:string,$ItemGroupOID as xs:string,$ItemOID as xs:string) as xs:string?
{
  let $destItemData := $ItemData/../../../../odm:StudyEventData[@StudyEventOID=$StudyEventOID]/odm:FormData[@FormOID=$FormOID]/odm:ItemGroupData[@ItemGroupOID=$ItemGroupOID]/odm:*[@ItemOID=$ItemOID]
  return alix:getAnnotation($destItemData)
};

declare function alix:getAnnotation($ItemData as node(),$StudyEventOID as xs:string,$FormOID as xs:string, $FormRepeatKey as xs:string, $ItemGroupOID as xs:string,$ItemOID as xs:string) as xs:string?
{
  let $destItemData := $ItemData/../../../../odm:StudyEventData[@StudyEventOID=$StudyEventOID]/odm:FormData[@FormOID=$FormOID and @FormRepeatKey=$FormRepeatKey]/odm:ItemGroupData[@ItemGroupOID=$ItemGroupOID]/odm:*[@ItemOID=$ItemOID]
  return alix:getAnnotation($destItemData)
};

declare function alix:getAnnotation($ItemData as node(),$ItemOID as xs:string) as xs:string?
{
  let $destItemData := $ItemData/../odm:*[@ItemOID=$ItemOID]
  return alix:getAnnotation($destItemData)
};

declare function alix:getAnnotation($ItemData as node()*) as xs:string?
{
  let $Annotations := $ItemData/../../../../../odm:Annotations
  let $AnnotationId := $ItemData[last()]/@AnnotationID
  return
    if($AnnotationId)
      then $Annotations/odm:Annotation[@ID=$AnnotationId]/odm:Flag/odm:FlagValue/string()
      else ''
};